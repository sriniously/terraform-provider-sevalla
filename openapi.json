{
  "openapi": "3.1.0",
  "info": {
    "title": "Sevalla API",
    "version": "1.57.1",
    "description": "# Introduction\n\nWelcome to the API Reference of Sevalla’s REST API. With this API, you can leverage some of our platform's features in your own applications and automated workflows. Our API receives and returns JSON formatted requests and responses.\n\nThroughout this reference, you can see the schema of our API endpoints along with explanations and usage examples. You can try out the API with the “Try it” console and find code examples in a few popular programming languages. We’ve also made it easy to copy the code examples so you can quickly incorporate them into your application or workflow.\n\n**Note:** To use the “Try it” console, you’ll need your API key (Bearer Token in the console) and any required parameters for the endpoint you want to test.\n",
    "termsOfService": "https://kinsta.com/legal/terms-service/",
    "x-logo": {
      "url": "https://sevalla-landing-page-r2bkd.kinsta.page/images/sevalla-logo.svg",
      "href": "/"
    }
  },
  "servers": [
    {
      "url": "https://api.sevalla.com/v2"
    }
  ],
  "tags": [
    {
      "name": "Company Users",
      "description": "With the `users` endpoint, you can get a list of your [company’s users](https://kinsta.com/docs/company-settings/user-management/), this includes their id, email address, full name, and a link to their profile picture.\n"
    },
    {
      "name": "Applications",
      "description": "You can use the `applications` endpoint to:\n\n* Get a list of your company’s applications.\n* See information about a specific application, including [deployment details](https://docs.sevalla.com/application-hosting/build-deploy/application-deployments) and [processes](https://docs.sevalla.com/application-hosting/processes).\n* [Delete an application](https://docs.sevalla.com/applications/settings#delete-application).\n* Send a `PUT` request to update details within the [application settings](https://docs.sevalla.com/applications/settings), such as the build path, display name, default branch, and more.\n"
    },
    {
      "name": "Application Deployments",
      "description": "With the `deployments` endpoint, you can get [deployment details](https://docs.sevalla.com/application-hosting/build-deploy/application-deployments#details) like the deployment progress and more. \n\nYou can also send a `POST` request to the endpoint to manually or programmatically deploy an application. This request can be done from your terminal or using an automated script or CI/CD pipeline (e.g. [CircleCI](https://circleci.com/), [Jenkins](https://www.jenkins.io/), etc.).\n"
    },
    {
      "name": "Application Processes",
      "description": "The `processes` endpoint can be used to get more details about an [application’s processes](https://docs.sevalla.com/application-hosting/processes), including the type, the [start command](https://docs.sevalla.com/application-hosting/build-deploy/application-start-command) (labeled entrypoint in the response), and more.\n"
    },
    {
      "name": "Internal Connections",
      "description": " You can use the `internal connections` endpoint to send a `POST` request to create an [internal connection](https://docs.sevalla.com/application-hosting/application-connections#add-an-internal-connection) between your application and database hosted on Sevalla. This request can be done from your terminal or using an automated script or CI/CD pipeline (e.g. [CircleCI](https://circleci.com/), [Jenkins](https://www.jenkins.io/), etc.).\n"
    },
    {
      "name": "Application CDN",
      "description": "Sevalla's premium [CDN](https://docs.sevalla.com/applications/cdn), powered by Cloudflare, significantly accelerates the delivery of your application's assets, ensuring faster and more efficient performance.\n\nWith the `cdn` endpoint, you can send a `POST` request to toggle the CDN on or off. \n"
    },
    {
      "name": "Application Edge Caching",
      "description": "[Edge caching](https://docs.sevalla.com/applications/edge-caching) saves your site/page cache to Cloudflare's global network of data centers.\n\nWith the `edge-cache` endpoint, you can send a `POST` request to toggle edge caching on or off. \n"
    },
    {
      "name": "Application Clear Cache",
      "description": "Effortlessly reset both Sevalla's premium [CDN](https://docs.sevalla.com/applications/cdn), and Cloudflare's global [Edge Caching](https://docs.sevalla.com/applications/edge-caching) network with the `clear-cache` endpoint, ensuring a comprehensive refresh of your application's assets.\n"
    },
    {
      "name": "Application Metrics",
      "description": "The `metrics` endpoint can be used to get information about your [application's analytics](https://docs.sevalla.com/applications/analytics) such as the bandwidth, build time, average response request and more. \n"
    },
    {
      "name": "Databases",
      "description": "You can use the `databases` endpoint to:\n\n* Get a list of your company’s databases.\n* See details about a specific database.\n* [Create a new datbase](https://docs.sevalla.com/databases/get-started/add-a-database).\n* [Delete a database](https://docs.sevalla.com/database-hosting/database-settings#delete-database).\n* Send a `PUT` request to update the [database settings](https://docs.sevalla.com/database-hosting/database-settings), including the resource type and display name. \n"
    },
    {
      "name": "Static Sites",
      "description": "You can use the `static sites` endpoint to:\n\n* Get a list of your company’s static sites.\n* See information about a specific site, including the [deployment details](https://docs.sevalla.com/static-site-hosting/static-site-deployments#deployment-details-1).\n* [Delete a static site](https://docs.sevalla.com/static-sites/settings#delete-site).\n* Send a `PUT` request to update details within the [site settings](https://docs.sevalla.com/static-sites/settings#edit-details), such as the build command, display name, default branch, and more.\n"
    },
    {
      "name": "Static Site Deployments",
      "description": "With the `deployments` endpoint, you can get [deployment details](https://docs.sevalla.com/static-site-hosting/static-site-deployments#deployment-details-1) like the deployment progress and more. \n\nYou can also send a `POST` request to the endpoint to manually or programmatically deploy a static site. This request can be done from your terminal or using an automated script or CI/CD pipeline (e.g. [CircleCI](https://circleci.com/), [Jenkins](https://www.jenkins.io/), etc.).\n"
    },
    {
      "name": "Operations",
      "description": "The goal of the `operations` endpoint is to check the progress of ongoing operations triggered by the API. For example, Site Creation provides `202 Accepted` response for the first call, and provides an `operation_id`, that you can use as a parameter of this endpoint.\n"
    },
    {
      "name": "Authentication",
      "description": "The `authentication` endpoint validates the status of your API key. If the API key is valid, it shows details of the key including when the key expires. "
    }
  ],
  "paths": {
    "/company/{id}/users": {
      "get": {
        "operationId": "getCompanyUsers",
        "summary": "Get list of company users",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Company Users"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "List of company users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyUsersResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the company or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving company users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications": {
      "get": {
        "operationId": "getApplications",
        "summary": "Get list of applications by Company ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "company",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 10,
              "example": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 0,
              "example": 3
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of applications requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKApplications"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the company or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving applications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}": {
      "get": {
        "operationId": "getApplicationById",
        "summary": "Get application by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of applications requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKApplicationSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the application or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteApplication",
        "summary": "Delete application by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of applications requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while deleting application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateApplicationById",
        "summary": "Update application basic details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplicationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Application updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateApplicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while updating application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{name}": {
      "get": {
        "operationId": "getApplicationByName",
        "summary": "Get application by name",
        "deprecated": true,
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Applications"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "unique-name"
            },
            "required": true,
            "name": "name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of applications requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKApplicationSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the application or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/internal-connections": {
      "post": {
        "operationId": "createInternalConnection",
        "summary": "Create an internal connection",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Internal Connections"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInternalConnectionRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Internal connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKCreateInternalConnectionResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating the connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/cdn/toggle-status": {
      "post": {
        "operationId": "toggleCdnStatus",
        "summary": "Toggle CDN status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application CDN"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "CDN status changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleCDNResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while toggling CDN status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/edge-cache/toggle-status": {
      "post": {
        "operationId": "toggleEdgeCachingStatus",
        "summary": "Toggle edge caching status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Edge Caching"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Edge caching status changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToggleEdgeCachingResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while toggling edge caching status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/clear-cache": {
      "post": {
        "operationId": "clearAppCache",
        "summary": "Clear cache",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Clear Cache"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Cache cleared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearAppCacheResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while clearing cache",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/bandwidth": {
      "get": {
        "operationId": "getApplicationBandwidth",
        "summary": "Bandwidth",
        "description": "Total data that is transmitted in the selected time period.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application bandwidth.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationBandwidthResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application bandwidth",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/build-time": {
      "get": {
        "operationId": "getApplicationBuildTime",
        "summary": "Build Time",
        "description": "Total time your application has taken to be built.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application build time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationBuildTimeResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application build time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/run-time": {
      "get": {
        "operationId": "getApplicationRunTime",
        "summary": "Run Time",
        "description": "Total time the application is running after being built and deployed.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application run time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationRunTimeResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application build time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/http-requests": {
      "get": {
        "operationId": "getApplicationHttpRequests",
        "summary": "HTTP Requests per Minute",
        "description": "Total average requests per minute.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application average HTTP requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationHttpRequestsResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application average HTTP requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/response-time": {
      "get": {
        "operationId": "getApplicationAverageResponseTime",
        "summary": "Average Response Time",
        "description": "Average request response time. If \"percent\" is set, the P50 or P95 response time will be returned.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "enum": [
                50,
                95
              ],
              "description": "The percentile of slowest requests to return (e.g. 95 means we return the average of the 5% slowest requests)",
              "example": 95,
              "externalDocs": {
                "description": "Find more information about supported percentiles",
                "url": "https://kinsta.com/docs/application-analytics/#average-transaction-time"
              }
            },
            "required": false,
            "name": "percent",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application average response time.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationResponseTimeResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application average response time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/slowest-requests": {
      "get": {
        "operationId": "getApplicationSlowestRequests",
        "summary": "Slowest Requests",
        "description": "Slowest response shows you exactly which responses are the slowest on your application.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "default": 10,
              "example": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application slowest requests.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GetApplicationResponseTimeResponseSchema"
                    },
                    {
                      "properties": {
                        "app": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                            },
                            "display_name": {
                              "type": "string",
                              "example": "my-app"
                            },
                            "metrics": {
                              "type": "object",
                              "properties": {
                                "timeframe": {
                                  "type": "object",
                                  "properties": {
                                    "start": {
                                      "type": "string",
                                      "example": "1679587045511"
                                    },
                                    "end": {
                                      "type": "string",
                                      "example": "1679587045511"
                                    }
                                  },
                                  "required": [
                                    "start",
                                    "end"
                                  ]
                                },
                                "slowest_requests": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "avg_response_time_ms": {
                                        "type": "number",
                                        "example": 120
                                      },
                                      "client_request_path": {
                                        "type": "string",
                                        "example": "/api"
                                      },
                                      "request_count": {
                                        "type": "number",
                                        "example": 100
                                      }
                                    },
                                    "required": [
                                      "avg_response_time_ms",
                                      "client_request_path",
                                      "request_count"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "timeframe",
                                "slowest_requests"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "display_name",
                            "metrics"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application slowest requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/cpu-usage": {
      "get": {
        "operationId": "getApplicationCpuUsage",
        "summary": "CPU Usage",
        "description": "An average of the total CPU usage for the selected time period, as a percentage of instance’s CPU resources.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application CPU usage.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationCpuUsageResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application CPU usage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/{id}/metrics/memory-usage": {
      "get": {
        "operationId": "getApplicationMemoryUsage",
        "summary": "Memory Usage",
        "description": "An average of the total Memory (RAM) usage for the selected time period.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Metrics"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "example": 3600
            },
            "required": true,
            "name": "interval_in_seconds",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_start",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2021-07-22T18:10:45.511Z"
            },
            "required": true,
            "name": "timeframe_end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application memory usage.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationMemoryUsageResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "No application or database found with the provided unique ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application memory usage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/deployments/{deployment_id}": {
      "get": {
        "operationId": "getDeploymentById",
        "summary": "Get application deployment details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Deployments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "deployment_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of application deployment by ID requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKDeploymentByIdSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the application deployment or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application deployment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/processes/{process_id}": {
      "get": {
        "operationId": "getProcessById",
        "summary": "Get process by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Processes"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "process_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of application process by ID requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKProcessByIdSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the application process or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving application process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/processes/{id}": {
      "put": {
        "operationId": "UpdateProcessById",
        "summary": "Update process details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Processes"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProcessRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Process updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProcessResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while updating process",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/deployments": {
      "post": {
        "operationId": "manualDeployApplication",
        "summary": "Manually deploy an application",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Deployments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualDeployAppRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deployment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKManualDeploymentSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating the deployment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/applications/promote": {
      "post": {
        "operationId": "promoteApplication",
        "summary": "Promote an application",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Application Deployments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromoteAppRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "App promoted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKPromoteAppSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while promoting the app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/pipelines": {
      "get": {
        "operationId": "getPipelines",
        "summary": "Get list of pipelines by Company ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Pipelines"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "company",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 10,
              "example": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 0,
              "example": 3
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of pipelines requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKPipelines"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the company or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving pipelines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/pipelines/{id}/create-preview-app": {
      "post": {
        "operationId": "createPreviewApp",
        "summary": "Create preview app",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Pipelines"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreviewAppRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preview app created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKCreatePreviewAppSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating a preview app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/databases": {
      "get": {
        "operationId": "getDatabases",
        "summary": "Get list of databases by Company ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "company",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 10,
              "example": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 0,
              "example": 3
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of databases requests",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyDatabasesSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the company or the user does not have permissions to retrieve data",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving databases",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createDatabase",
        "summary": "Create a new database",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Databases"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDatabaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response object of create database request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKCreateDatabaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the company or the user does not have permissions to create a database",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating database",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/databases/{id}": {
      "get": {
        "operationId": "getDatabaseById",
        "summary": "Get database by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            },
            "required": true,
            "name": "internal",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            },
            "required": true,
            "name": "external",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of databases requests",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKDatabaseByIdSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the database or the user does not have permissions to retrieve data",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving database",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateDatabase",
        "summary": "Update a database",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDatabaseRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response object of update database request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKUpdateDatabaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the company or the user does not have permissions to update a database",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while updating database",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteDatabase",
        "summary": "Delete database by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of databases requests",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteDatabaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the database or the user does not have required permissions",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while deleting database",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/databases/{name}": {
      "get": {
        "operationId": "getDatabaseByName",
        "summary": "Get database by name",
        "deprecated": true,
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "unique-name"
            },
            "required": true,
            "name": "name",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            },
            "required": true,
            "name": "internal",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": true,
              "example": true
            },
            "required": true,
            "name": "external",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of databases requests",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKDatabaseByNameSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the database or the user does not have permissions to retrieve data",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving database",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/tools/clear-cache": {
      "post": {
        "operationId": "clearSiteCache",
        "summary": "Clear Site Cache",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Tools"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearCacheRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Clearing site cache in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKClearCacheResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while trying to clear cache",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/tools/restart-php": {
      "post": {
        "operationId": "restartPhpEngine",
        "summary": "Restart an Environment's PHP Engine",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Tools"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestartPhpEngineRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Restarting PHP in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartPhpEngineResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while trying to restart the PHP engine",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/tools/modify-php-version": {
      "put": {
        "operationId": "modifyPhpVersion",
        "summary": "Modify an Environment's PHP Version",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Tools"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyPhpVersionRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Modifying PHP version in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifyPhpVersionResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while trying to modify PHP version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/clone": {
      "post": {
        "operationId": "cloneWordPressSite",
        "summary": "Clone existing site",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Sites"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloneWPSite-Body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Cloning Wordpress site action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cloneWPSite-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating a site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/plain": {
      "post": {
        "operationId": "addPlainWordPressSite",
        "summary": "Create a plain site",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Sites"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addPlainWPSite-Body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Plain site creation action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addPlainWPSite-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating a site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites": {
      "post": {
        "operationId": "addWordPressSite",
        "summary": "Create a site",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Sites"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addWPSite-Body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Site creation action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addWPSite-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating a site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getSites",
        "summary": "Get list of company sites",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Sites"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "company",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found sites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getSites-Response"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the sites or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving sites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{site_id}": {
      "get": {
        "operationId": "getSiteById",
        "summary": "Get site by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Sites"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found site by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteById-Response"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the site or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving site by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteWordpressSite",
        "summary": "Delete a site",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Sites"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Site deletion action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteWpSite-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while deleting a site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/plugins": {
      "get": {
        "operationId": "getPlugins",
        "summary": "Get list of WP Site plugins",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Themes & Plugins"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found WP plugins",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWpSiteEnvironmentPluginsResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the WP plugins or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving WP plugins",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updatePlugin",
        "summary": "Update WP Plugin",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Themes & Plugins"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWpEnvironmentRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Updating of plugin started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWpEnvironmentPluginResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while updating a plugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/plugins/bulk-update": {
      "put": {
        "operationId": "bulkUpdatePlugins",
        "summary": "Bulk update WP Site plugins",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Themes & Plugins"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateWpEnvironmentPluginsRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated WP plugins",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUpdateWpEnvironmentPluginsResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the WP themes or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while bulk-updating WP plugins",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/themes": {
      "get": {
        "operationId": "getThemes",
        "summary": "Get list of WP Site themes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Themes & Plugins"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found WP themes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWpSiteEnvironmentThemesResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the WP themes or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving WP themes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateTheme",
        "summary": "Update WP Theme",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Themes & Plugins"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWpEnvironmentRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Updating of theme started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWpEnvironmentThemeResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while updating a theme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/themes/bulk-update": {
      "put": {
        "operationId": "bulkUpdateThemes",
        "summary": "Bulk update WP Site themes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Themes & Plugins"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateWpEnvironmentThemesRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated WP themes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUpdateWpEnvironmentThemesResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the WP themes or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while bulk-updating WP themes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/domains": {
      "post": {
        "operationId": "addSiteDomain",
        "summary": "Add new site domain",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Domains"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSiteDomainRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Site domain creation action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddSiteDomainResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while adding a site domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSiteDomain",
        "summary": "Delete one or more site domains",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Domains"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSiteDomainRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Site domain deletion action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSiteDomainResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while deleting site domains",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{site_id}/environments": {
      "get": {
        "operationId": "getSiteEnvironments",
        "summary": "Get site environments",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found site environments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEnvironments-Response"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the site environments or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving site environments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addWordPressEnvironment",
        "summary": "Create a WordPress site environment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addWPEnvironment-Body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Environment creation action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addWPEnvironment-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating an environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "pushWordPressEnvironment",
        "summary": "Push a WordPress site environment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PushEnvironmentRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Pushing environment action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushEnvironmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while pushing an environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{site_id}/environments/plain": {
      "post": {
        "operationId": "addPlainEnvironment",
        "summary": "Create a plain environment (no WordPress installed)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloneWpEnvironment-Body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Creating plain environment action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cloneWpEnvironment-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating an environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{site_id}/environments/clone": {
      "post": {
        "operationId": "cloneWordPressEnvironment",
        "summary": "Clone an environment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/cloneWpEnvironment-Body"
                  },
                  {
                    "properties": {
                      "display_name": {
                        "type": "string",
                        "example": "development"
                      },
                      "is_premium": {
                        "type": "boolean",
                        "example": false
                      },
                      "source_env_id": {
                        "type": "string",
                        "example": "0010cdaf-0b94-472e-86bd-7edf6fceaa1c"
                      }
                    },
                    "required": [
                      "display_name",
                      "is_premium",
                      "source_env_id"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Cloning environment action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/cloneWpEnvironment-Response"
                    },
                    {
                      "properties": {
                        "operation_id": {
                          "type": "string",
                          "example": "environment:clone-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                        },
                        "message": {
                          "type": "string",
                          "example": "Cloning environment in progress"
                        },
                        "status": {
                          "type": "number",
                          "example": 202
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating an environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}": {
      "delete": {
        "operationId": "deleteWordpressEnvironment",
        "summary": "Delete a WordPress site environment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Deleting envrionment action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteWpEnvironment-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while deleting an environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/change-environment-php-allocation": {
      "post": {
        "operationId": "changeEnvironmentPhpAllocation",
        "summary": "Change PHP allocation settings for a premium staging environment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeEnvironmentPhpAllocation-Body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Environment PHP allocation change action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeEnvironmentPhpAllocation-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while changing PHP allocation settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/{site_id}/change-site-php-allocation": {
      "post": {
        "operationId": "changeSitePhpAllocation",
        "summary": "Change PHP allocation settings for a site's live and standard staging environments",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Environments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "site_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeSitePhpAllocation-Body"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Site PHP allocation change action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/changeSitePhpAllocation-Response"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while changing PHP allocation settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/operations/{operation_id}": {
      "get": {
        "operationId": "getOperationStatus",
        "summary": "Get the status information of an operation",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "sites:add-8dc99dce-c5c7-4d8e-b589-6641696fc830"
            },
            "required": true,
            "name": "operation_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "The operation has successfully finished",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema200"
                }
              }
            }
          },
          "202": {
            "description": "The operation is still in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponse"
                }
              }
            }
          },
          "404": {
            "description": "The operation was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "The operation has failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/edge-caching/clear": {
      "post": {
        "operationId": "clearSiteEdgeCache",
        "summary": "Clear Site Edge Cache",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Edge Caching"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearEdgeCacheRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Clearing site edge cache in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MKClearEdgeCacheResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while trying to clear cache",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/cdn/clear-cache": {
      "post": {
        "operationId": "clearSiteCDNCache",
        "summary": "Clear Site CDN Cache",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress CDN"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClearCDNCacheRequestBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Clearing site CDN cache in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearCDNCacheResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while trying to clear cache",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/tools/denied-ips": {
      "get": {
        "operationId": "getDeniedIPs",
        "summary": "Get list of denied IPs",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Tools"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDeniedIPsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns list of denied IPs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeniedIPsResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while trying to get list of denied IPs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateDeniedIPs",
        "summary": "Update denied IP list",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "WordPress Site Tools"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeniedIPsRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of denied IPs was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDeniedIPsResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while trying to update list of denied IPs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/backups": {
      "get": {
        "operationId": "getBackups",
        "summary": "Get manual, schedule and system generated backups",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Backups"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found backups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBackupsResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the environment or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving backups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/downloadable-backups": {
      "get": {
        "operationId": "getDownloadableBackups",
        "summary": "Get downloadable backups",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Backups"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found downloadable backups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDownloadableBackupsResponseSchema"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the environment or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving downloadable backups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{target_env_id}/backups/restore": {
      "post": {
        "operationId": "restoreBackup",
        "summary": "Restore a scheduled or manual or system generated backup to an environment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Backups"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "target_env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreSnapshotToEnvRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Restore backup to environment action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestoreSnapshotToEnvResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while restoring backup to environment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/manual-backups": {
      "post": {
        "operationId": "addManualBackup",
        "summary": "Add a manual backup to an environment",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Backups"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddManualBackupRequestBodySchema"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Creating manual backup action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddManualBackupResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating manual backup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/backups/{backup_id}": {
      "delete": {
        "operationId": "removeBackup",
        "summary": "Remove a WP site environment backup",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Backups"
        ],
        "parameters": [
          {
            "schema": {
              "type": "number",
              "example": 165424355
            },
            "required": true,
            "name": "backup_id",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Removing backup action started. Check MyKinsta for status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveBackupResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while removing backup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/sites/environments/{env_id}/logs": {
      "get": {
        "operationId": "getLogs",
        "summary": "Get site logs",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Logs"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "env_id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "error",
                "access",
                "kinsta-cache-perf"
              ],
              "default": "error",
              "example": "error"
            },
            "required": true,
            "name": "file_name",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "maximum": 20000,
              "default": 1000,
              "example": 1000
            },
            "required": true,
            "name": "lines",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found site logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLogsResponseSchema"
                }
              }
            }
          },
          "400": {
            "description": "One or more of the required parameters were not provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema400"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the site logs or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving site logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/static-sites": {
      "get": {
        "operationId": "getStaticSites",
        "summary": "Get list of company static sites",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Static Sites"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "company",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 10,
              "example": 10
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "default": 0,
              "example": 3
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found static sites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getStaticSites-Response"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the static sites or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving static sites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/static-sites/{id}": {
      "get": {
        "operationId": "getStaticSiteById",
        "summary": "Get static site by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Static Sites"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found static site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticSiteById-Response"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the static site or the user does not have permissions to retrieve data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving static site by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateStaticSiteById",
        "summary": "Update static site basic details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Static Sites"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStaticSiteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Static site updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStaticSiteResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while updating static site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteStaticSite",
        "summary": "Delete static site",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Static Sites"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of static site requests",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteStaticSiteResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the static site or the user does not have required permissions",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while deleting static site",
            "content": {
              "database/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/static-sites/deployments/{deployment_id}": {
      "get": {
        "operationId": "getStaticSiteDeploymentById",
        "summary": "Get static site deployment details",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Static Site Deployments"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
            },
            "required": true,
            "name": "deployment_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Response object of static site deployment by ID requests",
            "content": {
              "static site/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticSiteDeploymentById-Response"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "static site/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the static site deployment or the user does not have permissions to retrieve data",
            "content": {
              "static site/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema404"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while retrieving static site deployment",
            "content": {
              "static site/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/static-sites/deployments": {
      "post": {
        "operationId": "manualDeployStaticSite",
        "summary": "Manually deploy a static site",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Static Site Deployments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualStaticSiteDeploymentBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deployment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManualStaticSiteDeploymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating the deployment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/static-sites/deployments/redeploy": {
      "post": {
        "operationId": "redeployStaticSite",
        "summary": "Redeploy a static site",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Static Site Deployments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticSiteRedeploymentBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deployment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticSiteRedeploymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while creating the deployment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    },
    "/validate": {
      "get": {
        "operationId": "validateApiKey",
        "summary": "Validate API Key",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Response with Api key details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAPIKeyResponse"
                }
              }
            }
          },
          "401": {
            "description": "No or invalid API key provided to the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema401"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while validating the API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponseSchema500"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {},
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "CompanyByIdRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "CompanyUsersResponseSchema": {
        "type": "object",
        "properties": {
          "company": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "example@exmample.com"
                        },
                        "image": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50"
                        },
                        "full_name": {
                          "type": "string",
                          "example": "John Doe"
                        }
                      },
                      "required": [
                        "id",
                        "email",
                        "image",
                        "full_name"
                      ]
                    }
                  },
                  "required": [
                    "user"
                  ]
                }
              }
            },
            "required": [
              "users"
            ]
          }
        },
        "required": [
          "company"
        ]
      },
      "StatusResponseSchema200": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Successfully finished request"
          },
          "status": {
            "type": "number",
            "example": 200
          },
          "data": {}
        },
        "required": [
          "message",
          "status"
        ]
      },
      "StatusResponseSchema202": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          },
          "data": {}
        },
        "required": [
          "message",
          "status"
        ]
      },
      "StatusResponseSchema400": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Bad request format"
          },
          "status": {
            "type": "number",
            "example": 400
          },
          "data": {}
        },
        "required": [
          "message",
          "status"
        ]
      },
      "StatusResponseSchema401": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "No or invalid API key provided to the request"
          },
          "status": {
            "type": "number",
            "example": 401
          },
          "data": {}
        },
        "required": [
          "message",
          "status"
        ]
      },
      "StatusResponseSchema404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Could not find data or the user does not have permissions to retrieve it"
          },
          "status": {
            "type": "number",
            "example": 404
          },
          "data": {}
        },
        "required": [
          "message",
          "status"
        ]
      },
      "StatusResponseSchema500": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Error occurred while processing your request"
          },
          "status": {
            "type": "number",
            "example": 500
          },
          "data": {}
        },
        "required": [
          "message",
          "status"
        ]
      },
      "MKApplicationSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "name": {
                "type": "string",
                "example": "unique-name"
              },
              "display_name": {
                "type": "string",
                "example": "firstsite"
              },
              "status": {
                "type": "string",
                "example": "deploymentSuccess"
              },
              "deployments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                    },
                    "branch": {
                      "type": "string",
                      "example": "main"
                    },
                    "repo_url": {
                      "type": "string",
                      "example": "http://example.com"
                    },
                    "commit_message": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "example": "docs: example"
                    },
                    "created_at": {
                      "type": "number",
                      "example": 1667489138845
                    }
                  },
                  "required": [
                    "id",
                    "branch",
                    "repo_url",
                    "commit_message",
                    "created_at"
                  ]
                }
              },
              "processes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                    },
                    "key": {
                      "type": "string",
                      "example": "web"
                    }
                  },
                  "required": [
                    "id",
                    "key"
                  ]
                }
              }
            },
            "required": [
              "id",
              "name",
              "display_name",
              "status",
              "deployments",
              "processes"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetAppRequest": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "example": 10
          },
          "offset": {
            "type": "number",
            "default": 0,
            "example": 3
          }
        },
        "required": [
          "company"
        ]
      },
      "App": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "unique-name"
          },
          "display_name": {
            "type": "string",
            "example": "firstsite"
          },
          "status": {
            "type": "string",
            "example": "deploymentSuccess"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "status"
        ]
      },
      "CompanyAppsSchema": {
        "type": "object",
        "properties": {
          "apps": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/App"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        },
        "required": [
          "apps"
        ]
      },
      "MKApplications": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyAppsSchema"
          }
        },
        "required": [
          "company"
        ]
      },
      "AppByIdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetAppByNameRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "unique-name"
          }
        },
        "required": [
          "name"
        ]
      },
      "DeleteApplicationParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeleteApplicationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Application \"54fb80af-576c-4fdc-ba4f-b596c83f15a1\" is being deleted"
          }
        },
        "required": [
          "message"
        ]
      },
      "CreateInternalConnectionRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateInternalConnectionRequestBody": {
        "type": "object",
        "properties": {
          "target_type": {
            "type": "string",
            "enum": [
              "appResource",
              "dbResource",
              "envResource"
            ],
            "description": "type of the resource to connect to",
            "example": "dbResource"
          },
          "target_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "target_type",
          "target_id"
        ]
      },
      "MKCreateInternalConnectionResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "example": "success"
          }
        },
        "required": [
          "result"
        ]
      },
      "ToggleCDNRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "ToggleCDNResponse": {
        "type": "object",
        "properties": {
          "isTurnedOn": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "isTurnedOn"
        ]
      },
      "ToggleEdgeCachingRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "ToggleEdgeCachingResponse": {
        "type": "object",
        "properties": {
          "isTurnedOn": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "isTurnedOn"
        ]
      },
      "ClearAppCacheRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "ClearAppCacheResponse": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "isSuccess"
        ]
      },
      "GetApplicationMetricsParamsSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetApplicationMetricsQuerySchema": {
        "type": "object",
        "properties": {
          "interval_in_seconds": {
            "type": "integer",
            "example": 3600
          },
          "timeframe_start": {
            "type": "string",
            "format": "date-time",
            "example": "2021-07-22T18:10:45.511Z"
          },
          "timeframe_end": {
            "type": "string",
            "format": "date-time",
            "example": "2021-07-22T18:10:45.511Z"
          }
        },
        "required": [
          "interval_in_seconds",
          "timeframe_start",
          "timeframe_end"
        ]
      },
      "GetApplicationBandwidthResponseSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "display_name": {
                "type": "string",
                "example": "my-app"
              },
              "metrics": {
                "type": "object",
                "properties": {
                  "timeframe": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "example": "1679587045511"
                      },
                      "end": {
                        "type": "string",
                        "example": "1679587045511"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ]
                  },
                  "bandwidth": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "type": "string",
                          "example": "1679587045511"
                        },
                        "value": {
                          "type": "string",
                          "example": "value"
                        }
                      },
                      "required": [
                        "time",
                        "value"
                      ]
                    }
                  }
                },
                "required": [
                  "timeframe",
                  "bandwidth"
                ]
              }
            },
            "required": [
              "id",
              "display_name",
              "metrics"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetApplicationBuildTimeResponseSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "display_name": {
                "type": "string",
                "example": "my-app"
              },
              "metrics": {
                "type": "object",
                "properties": {
                  "timeframe": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "example": "1679587045511"
                      },
                      "end": {
                        "type": "string",
                        "example": "1679587045511"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ]
                  },
                  "build_time": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "time": {
                                "type": "string",
                                "example": "1679587045511"
                              },
                              "value": {
                                "type": "number",
                                "example": 127
                              }
                            },
                            "required": [
                              "time",
                              "value"
                            ]
                          }
                        },
                        "resource_type": {
                          "type": "string",
                          "example": "standard"
                        }
                      },
                      "required": [
                        "data",
                        "resource_type"
                      ]
                    }
                  }
                },
                "required": [
                  "timeframe",
                  "build_time"
                ]
              }
            },
            "required": [
              "id",
              "display_name",
              "metrics"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetApplicationRunTimeResponseSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "display_name": {
                "type": "string",
                "example": "my-app"
              },
              "metrics": {
                "type": "object",
                "properties": {
                  "timeframe": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "example": "1679587045511"
                      },
                      "end": {
                        "type": "string",
                        "example": "1679587045511"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ]
                  },
                  "runtime": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "process_id": {
                          "type": "string",
                          "example": "1679587045511"
                        },
                        "seconds": {
                          "type": "string",
                          "example": "43223"
                        },
                        "plan": {
                          "type": "string",
                          "example": "s1"
                        },
                        "start_time": {
                          "type": "string",
                          "example": "1679587045511"
                        },
                        "end_time": {
                          "type": "string",
                          "example": "1679587045511"
                        }
                      },
                      "required": [
                        "process_id",
                        "seconds",
                        "plan",
                        "start_time",
                        "end_time"
                      ]
                    }
                  }
                },
                "required": [
                  "timeframe",
                  "runtime"
                ]
              }
            },
            "required": [
              "id",
              "display_name",
              "metrics"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetApplicationHttpRequestsResponseSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "display_name": {
                "type": "string",
                "example": "my-app"
              },
              "metrics": {
                "type": "object",
                "properties": {
                  "timeframe": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "example": "1679587045511"
                      },
                      "end": {
                        "type": "string",
                        "example": "1679587045511"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ]
                  },
                  "http_requests": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "type": "string",
                          "example": "1679587045511"
                        },
                        "value": {
                          "type": "string",
                          "example": "value"
                        }
                      },
                      "required": [
                        "time",
                        "value"
                      ]
                    }
                  }
                },
                "required": [
                  "timeframe",
                  "http_requests"
                ]
              }
            },
            "required": [
              "id",
              "display_name",
              "metrics"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetApplicationResponseTimeQuerySchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetApplicationMetricsQuerySchema"
          },
          {
            "type": "object",
            "properties": {
              "percent": {
                "type": "integer",
                "enum": [
                  50,
                  95
                ],
                "description": "The percentile of slowest requests to return (e.g. 95 means we return the average of the 5% slowest requests)",
                "example": 95,
                "externalDocs": {
                  "description": "Find more information about supported percentiles",
                  "url": "https://kinsta.com/docs/application-analytics/#average-transaction-time"
                }
              }
            }
          }
        ]
      },
      "GetApplicationResponseTimeResponseSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "display_name": {
                "type": "string",
                "example": "my-app"
              },
              "metrics": {
                "type": "object",
                "properties": {
                  "timeframe": {
                    "type": "object",
                    "properties": {
                      "start": {
                        "type": "string",
                        "example": "1679587045511"
                      },
                      "end": {
                        "type": "string",
                        "example": "1679587045511"
                      }
                    },
                    "required": [
                      "start",
                      "end"
                    ]
                  },
                  "response_time": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "time": {
                          "type": "string",
                          "example": "1679587045511"
                        },
                        "value": {
                          "type": "string",
                          "example": "977"
                        }
                      },
                      "required": [
                        "time",
                        "value"
                      ]
                    }
                  }
                },
                "required": [
                  "timeframe",
                  "response_time"
                ]
              }
            },
            "required": [
              "id",
              "display_name",
              "metrics"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetApplicationSlowestRequestsQuerySchema": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetApplicationMetricsQuerySchema"
          },
          {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "default": 10,
                "example": 10
              }
            }
          }
        ]
      },
      "GetApplicationCpuUsageResponseSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "app_name": {
                "type": "string",
                "example": "my-app"
              },
              "processes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                    },
                    "process_name": {
                      "type": "string",
                      "example": "web"
                    },
                    "cpu_limit": {
                      "type": "integer",
                      "example": 1
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "timeframe": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string",
                              "example": "1679587045511"
                            },
                            "end": {
                              "type": "string",
                              "example": "1679587045511"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "cpu_usage": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "time": {
                                "type": "string",
                                "example": "1679587045511"
                              },
                              "value": {
                                "type": "string",
                                "example": "value"
                              }
                            },
                            "required": [
                              "time",
                              "value"
                            ]
                          }
                        }
                      },
                      "required": [
                        "timeframe",
                        "cpu_usage"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "process_name",
                    "cpu_limit",
                    "metrics"
                  ]
                }
              }
            },
            "required": [
              "id",
              "app_name",
              "processes"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetApplicationMemoryUsageResponseSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "app_name": {
                "type": "string",
                "example": "my-app"
              },
              "processes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                    },
                    "process_name": {
                      "type": "string",
                      "example": "web"
                    },
                    "memory_limit": {
                      "type": "integer",
                      "example": 1
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "timeframe": {
                          "type": "object",
                          "properties": {
                            "start": {
                              "type": "string",
                              "example": "1679587045511"
                            },
                            "end": {
                              "type": "string",
                              "example": "1679587045511"
                            }
                          },
                          "required": [
                            "start",
                            "end"
                          ]
                        },
                        "memory_usage": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "time": {
                                "type": "string",
                                "example": "1679587045511"
                              },
                              "value": {
                                "type": "string",
                                "example": "value"
                              }
                            },
                            "required": [
                              "time",
                              "value"
                            ]
                          }
                        }
                      },
                      "required": [
                        "timeframe",
                        "memory_usage"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "process_name",
                    "memory_limit",
                    "metrics"
                  ]
                }
              }
            },
            "required": [
              "id",
              "app_name",
              "processes"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetDeploymentByIdRequest": {
        "type": "object",
        "properties": {
          "deployment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "deployment_id"
        ]
      },
      "DeploymentByIdSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "app_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "repo_url": {
            "type": "string",
            "example": "http://example.com"
          },
          "branch": {
            "type": "string",
            "example": "main"
          },
          "commit_sha": {
            "type": [
              "string",
              "null"
            ],
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "author_login": {
            "type": [
              "string",
              "null"
            ],
            "example": "john-doe"
          },
          "author_img": {
            "type": [
              "string",
              "null"
            ],
            "example": "http://example.com"
          },
          "commit_message": {
            "type": [
              "string",
              "null"
            ],
            "example": "docs: example"
          },
          "status": {
            "type": "string",
            "example": "success"
          },
          "created_at": {
            "type": "number",
            "example": 1665382600770
          }
        },
        "required": [
          "id",
          "app_id",
          "repo_url",
          "branch",
          "commit_sha",
          "author_login",
          "author_img",
          "commit_message",
          "status",
          "created_at"
        ]
      },
      "MKDeploymentByIdSchema": {
        "type": "object",
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/DeploymentByIdSchema"
          }
        },
        "required": [
          "deployment"
        ]
      },
      "GetProcessByIdRequest": {
        "type": "object",
        "properties": {
          "process_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "process_id"
        ]
      },
      "ProcessByIdSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "type": {
            "type": "string",
            "example": "web"
          },
          "display_name": {
            "type": "string",
            "example": "Web"
          },
          "instance_count": {
            "type": "number",
            "description": "Deprecated, use scaling_strategy instead.",
            "example": 1,
            "deprecated": true
          },
          "scaling_strategy": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "manual"
                    ]
                  },
                  "config": {
                    "type": "object",
                    "properties": {
                      "instanceCount": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 50
                      }
                    },
                    "required": [
                      "instanceCount"
                    ]
                  }
                },
                "required": [
                  "type",
                  "config"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "horizontal"
                    ]
                  },
                  "config": {
                    "type": "object",
                    "properties": {
                      "minInstanceCount": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 50
                      },
                      "maxInstanceCount": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 50
                      },
                      "targetCpuPercent": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 100,
                        "default": 80
                      },
                      "targetMemoryPercent": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 100,
                        "default": 80
                      },
                      "scaleUpIntervalSeconds": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 60000,
                        "default": 60
                      },
                      "scaleUpIncrement": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 5,
                        "default": 1
                      },
                      "scaleDownIntervalSeconds": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 60000,
                        "default": 600
                      },
                      "scaleDownIncrement": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 5,
                        "default": 1
                      }
                    },
                    "required": [
                      "minInstanceCount",
                      "maxInstanceCount"
                    ]
                  }
                },
                "required": [
                  "type",
                  "config"
                ]
              }
            ],
            "examples": [
              {
                "type": "manual",
                "config": {
                  "instanceCount": 8
                }
              },
              {
                "type": "horizontal",
                "config": {
                  "minInstanceCount": 3,
                  "maxInstanceCount": 20,
                  "scaleUpIncrement": 1,
                  "scaleDownIncrement": 1,
                  "scaleDownIntervalSeconds": 600,
                  "scaleUpIntervalSeconds": 60,
                  "targetCpuPercent": 80,
                  "targetMemoryPercent": 80
                }
              }
            ]
          },
          "resource_type_name": {
            "type": "string",
            "example": "s1"
          },
          "entrypoint": {
            "type": "string",
            "example": "npm start"
          }
        },
        "required": [
          "id",
          "type",
          "display_name",
          "instance_count",
          "scaling_strategy",
          "resource_type_name",
          "entrypoint"
        ]
      },
      "MKProcessByIdSchema": {
        "type": "object",
        "properties": {
          "process": {
            "$ref": "#/components/schemas/ProcessByIdSchema"
          }
        },
        "required": [
          "process"
        ]
      },
      "UpdateProcessRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateProcessRequestBody": {
        "type": "object",
        "properties": {
          "scaling_strategy": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "manual"
                    ]
                  },
                  "config": {
                    "type": "object",
                    "properties": {
                      "instanceCount": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 50
                      }
                    },
                    "required": [
                      "instanceCount"
                    ]
                  }
                },
                "required": [
                  "type",
                  "config"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "horizontal"
                    ]
                  },
                  "config": {
                    "type": "object",
                    "properties": {
                      "minInstanceCount": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 50
                      },
                      "maxInstanceCount": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 50
                      },
                      "targetCpuPercent": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 100
                      },
                      "targetMemoryPercent": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 100
                      },
                      "scaleUpIntervalSeconds": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 60000
                      },
                      "scaleUpIncrement": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 5
                      },
                      "scaleDownIntervalSeconds": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 60000
                      },
                      "scaleDownIncrement": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 5
                      }
                    },
                    "required": [
                      "minInstanceCount",
                      "maxInstanceCount"
                    ]
                  }
                },
                "required": [
                  "type",
                  "config"
                ]
              }
            ],
            "examples": [
              {
                "type": "manual",
                "config": {
                  "instanceCount": 8
                }
              },
              {
                "type": "horizontal",
                "config": {
                  "minInstanceCount": 3,
                  "maxInstanceCount": 20
                }
              }
            ]
          },
          "entrypoint": {
            "type": "string",
            "description": "The default start command of the process can be overwritten with entrypoint.",
            "example": "node index.js"
          }
        }
      },
      "UpdateProcessResponse": {
        "type": "object",
        "properties": {
          "process": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "app_id": {
                "type": "string",
                "example": "882b80af-576c-4fdc-ba4f-b596c83f9ksh"
              },
              "display_name": {
                "type": "string",
                "example": "Web process"
              },
              "entrypoint": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "node index.js"
              },
              "scaling_strategy": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "manual"
                        ]
                      },
                      "config": {
                        "type": "object",
                        "properties": {
                          "instanceCount": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 50
                          }
                        },
                        "required": [
                          "instanceCount"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "config"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "horizontal"
                        ]
                      },
                      "config": {
                        "type": "object",
                        "properties": {
                          "minInstanceCount": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 50
                          },
                          "maxInstanceCount": {
                            "type": "number",
                            "minimum": 0,
                            "maximum": 50
                          }
                        },
                        "required": [
                          "minInstanceCount",
                          "maxInstanceCount"
                        ]
                      }
                    },
                    "required": [
                      "type",
                      "config"
                    ]
                  }
                ],
                "examples": [
                  {
                    "type": "manual",
                    "config": {
                      "instanceCount": 8
                    }
                  },
                  {
                    "type": "horizontal",
                    "config": {
                      "minInstanceCount": 3,
                      "maxInstanceCount": 20
                    }
                  }
                ]
              },
              "updated_at": {
                "type": "number",
                "example": 1695300630620
              },
              "created_at": {
                "type": "number",
                "example": 1695300630620
              }
            },
            "required": [
              "id",
              "app_id",
              "display_name",
              "scaling_strategy",
              "updated_at",
              "created_at"
            ]
          }
        },
        "required": [
          "process"
        ]
      },
      "ManualDeployAppRequestBody": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "branch": {
            "type": "string",
            "example": "main"
          },
          "docker_image": {
            "type": "string",
            "example": "myimage:v2"
          },
          "is_restart": {
            "type": "boolean",
            "default": false,
            "description": "Set true if you want to release without building your app.",
            "example": false
          }
        },
        "required": [
          "app_id"
        ]
      },
      "MKManualDeploymentSchema": {
        "type": "object",
        "properties": {
          "deployment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "deployment"
        ]
      },
      "PromoteAppRequestBody": {
        "type": "object",
        "properties": {
          "source_app_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "target_app_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "14fb80af-576c-4fdc-ba4f-b596c83f15a1"
            }
          }
        },
        "required": [
          "source_app_id",
          "target_app_ids"
        ]
      },
      "MKPromoteAppSchema": {
        "type": "object",
        "properties": {
          "promote": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "target_app_id": {
                  "type": "string",
                  "example": "14fb80af-576c-4fdc-ba4f-b596c83f15a1"
                },
                "deployment_id": {
                  "type": "string",
                  "example": "34fb80af-576c-4fdc-ba4f-b596c83f15a1"
                }
              },
              "required": [
                "target_app_id",
                "deployment_id"
              ]
            }
          }
        },
        "required": [
          "promote"
        ]
      },
      "UpdateApplicationRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateApplicationRequestBody": {
        "type": "object",
        "properties": {
          "build_path": {
            "type": "string",
            "example": "dist"
          },
          "build_type": {
            "type": "string",
            "enum": [
              "dockerfile",
              "pack",
              "nixpacks"
            ],
            "example": "dockerfile"
          },
          "docker_file_path": {
            "type": "string",
            "example": "Dockerfile"
          },
          "docker_context": {
            "type": "string",
            "example": "."
          },
          "display_name": {
            "type": "string",
            "example": "My App"
          },
          "auto_deploy": {
            "type": "boolean",
            "example": true
          },
          "default_branch": {
            "type": "string",
            "example": "main"
          }
        }
      },
      "UpdateApplicationResponse": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "name": {
                "type": "string",
                "example": "my-app"
              },
              "status": {
                "type": "string",
                "enum": [
                  "deploymentInProgress",
                  "deploymentCancelled",
                  "deploymentFailed",
                  "deploymentSuccess",
                  "deleting",
                  "appDeletionFailed"
                ],
                "example": "deploymentInProgress"
              },
              "updated_at": {
                "type": "number",
                "example": 1695300630620
              },
              "build_path": {
                "type": "string",
                "example": "dist"
              },
              "build_type": {
                "type": "string",
                "enum": [
                  "dockerfile",
                  "pack",
                  "nixpacks"
                ],
                "example": "dockerfile"
              },
              "docker_file_path": {
                "type": "string",
                "example": "Dockerfile"
              },
              "docker_context": {
                "type": "string",
                "example": "."
              },
              "display_name": {
                "type": "string",
                "example": "My App"
              },
              "auto_deploy": {
                "type": "boolean",
                "example": true
              },
              "default_branch": {
                "type": "string",
                "example": "main"
              }
            },
            "required": [
              "id",
              "name",
              "status",
              "updated_at",
              "build_path",
              "build_type",
              "docker_file_path",
              "docker_context",
              "display_name",
              "auto_deploy",
              "default_branch"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetPipelineRequest": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "example": 10
          },
          "offset": {
            "type": "number",
            "default": 0,
            "example": 3
          }
        },
        "required": [
          "company"
        ]
      },
      "Pipeline": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "display_name": {
            "type": "string",
            "example": "first pipeline"
          },
          "stages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                },
                "display_name": {
                  "type": "string",
                  "example": "Staging"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "preview",
                    "standard"
                  ],
                  "example": "standard"
                }
              },
              "required": [
                "id",
                "display_name",
                "type"
              ]
            }
          }
        },
        "required": [
          "id",
          "display_name",
          "stages"
        ]
      },
      "CompanyPipelinesSchema": {
        "type": "object",
        "properties": {
          "pipelines": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Pipeline"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        },
        "required": [
          "pipelines"
        ]
      },
      "MKPipelines": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyPipelinesSchema"
          }
        },
        "required": [
          "company"
        ]
      },
      "CreatePreviewAppRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreatePreviewAppRequestBody": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "example": "main"
          },
          "pull_request_number": {
            "type": "number",
            "example": 14
          }
        },
        "required": [
          "branch"
        ]
      },
      "MKCreatePreviewAppSchema": {
        "type": "object",
        "properties": {
          "app": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "name": {
                "type": "string",
                "example": "test-app"
              },
              "displayName": {
                "type": "string",
                "example": "Test App"
              }
            },
            "required": [
              "id",
              "name",
              "displayName"
            ]
          }
        },
        "required": [
          "app"
        ]
      },
      "GetDatabasesRequest": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "example": 10
          },
          "offset": {
            "type": "number",
            "default": 0,
            "example": 3
          }
        },
        "required": [
          "company"
        ]
      },
      "Database": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "unique-db-name"
          },
          "display_name": {
            "type": "string",
            "example": "firstsite_db"
          },
          "status": {
            "type": "string",
            "example": "ready"
          },
          "updated_at": {
            "type": "number",
            "example": 1676218612219
          },
          "type": {
            "type": "string",
            "example": "postgresql"
          },
          "version": {
            "type": "string",
            "example": "14"
          },
          "resource_type_name": {
            "type": "string",
            "enum": [
              "db1",
              "db2",
              "db3",
              "db4",
              "db5",
              "db6",
              "db7",
              "db8",
              "db9"
            ],
            "example": "db1"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "status",
          "updated_at",
          "type",
          "version",
          "resource_type_name"
        ]
      },
      "CompanyDatabasesSchema": {
        "type": "object",
        "properties": {
          "databases": {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            },
            "required": [
              "items"
            ]
          }
        },
        "required": [
          "databases"
        ]
      },
      "MKDatabases": {
        "type": "object",
        "properties": {
          "company": {
            "$ref": "#/components/schemas/CompanyDatabasesSchema"
          }
        },
        "required": [
          "company"
        ]
      },
      "GetDatabaseByIdRequestQuery": {
        "type": "object",
        "properties": {
          "internal": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "external": {
            "type": "boolean",
            "default": true,
            "example": true
          }
        },
        "required": [
          "internal",
          "external"
        ]
      },
      "MKDatabaseByIdSchema": {
        "type": "object",
        "properties": {
          "database": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "name": {
                "type": "string",
                "example": "unique-db-name"
              },
              "display_name": {
                "type": "string",
                "example": "firstsite-db"
              },
              "status": {
                "type": "string",
                "example": "ready"
              },
              "created_at": {
                "type": "number",
                "example": 1668697088806
              },
              "memory_limit": {
                "type": "number",
                "example": 250
              },
              "cpu_limit": {
                "type": "number",
                "example": 250
              },
              "storage_size": {
                "type": "number",
                "example": 1000
              },
              "type": {
                "type": "string",
                "example": "postgresql"
              },
              "version": {
                "type": "string",
                "example": "14"
              },
              "cluster": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                  },
                  "location": {
                    "type": "string",
                    "example": "europe-west3"
                  },
                  "display_name": {
                    "type": "string",
                    "example": "Frankfurt, Germany Europe"
                  }
                },
                "required": [
                  "id",
                  "location",
                  "display_name"
                ]
              },
              "resource_type_name": {
                "type": "string",
                "enum": [
                  "db1",
                  "db2",
                  "db3",
                  "db4",
                  "db5",
                  "db6",
                  "db7",
                  "db8",
                  "db9"
                ],
                "example": "db1"
              },
              "internal_hostname": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "some-name.dns.svc.cluster.local"
              },
              "internal_port": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "5432"
              },
              "internal_connections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                    },
                    "type": {
                      "type": "string",
                      "example": "appResource"
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ]
                }
              },
              "data": {
                "type": "object",
                "properties": {
                  "db_name": {
                    "type": "string",
                    "example": "firstsite-db"
                  },
                  "db_password": {
                    "type": "string",
                    "example": "password"
                  },
                  "db_root_password": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "password"
                  },
                  "db_user": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "username"
                  }
                },
                "required": [
                  "db_name",
                  "db_password",
                  "db_root_password",
                  "db_user"
                ]
              },
              "external_connection_string": {
                "type": "string",
                "example": "postgresql://username:password@localhost:31866/firstsite-db"
              },
              "external_hostname": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "firstsite-db-postgresql.external.kinsta.app"
              },
              "external_port": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "31866"
              }
            },
            "required": [
              "id",
              "name",
              "display_name",
              "created_at",
              "memory_limit",
              "cpu_limit",
              "storage_size",
              "type",
              "version",
              "cluster",
              "resource_type_name"
            ]
          }
        },
        "required": [
          "database"
        ]
      },
      "GetDatabaseByNameRequestQuery": {
        "type": "object",
        "properties": {
          "internal": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "external": {
            "type": "boolean",
            "default": true,
            "example": true
          }
        },
        "required": [
          "internal",
          "external"
        ]
      },
      "MKDatabaseByNameSchema": {
        "type": "object",
        "properties": {
          "database": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "name": {
                "type": "string",
                "example": "unique-db-name"
              },
              "display_name": {
                "type": "string",
                "example": "firstsite-db"
              },
              "status": {
                "type": "string",
                "example": "ready"
              },
              "created_at": {
                "type": "number",
                "example": 1668697088806
              },
              "memory_limit": {
                "type": "number",
                "example": 250
              },
              "cpu_limit": {
                "type": "number",
                "example": 250
              },
              "storage_size": {
                "type": "number",
                "example": 1000
              },
              "type": {
                "type": "string",
                "example": "postgresql"
              },
              "version": {
                "type": "string",
                "example": "14"
              },
              "cluster": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                  },
                  "location": {
                    "type": "string",
                    "example": "europe-west3"
                  },
                  "display_name": {
                    "type": "string",
                    "example": "Frankfurt, Germany Europe"
                  }
                },
                "required": [
                  "id",
                  "location",
                  "display_name"
                ]
              },
              "resource_type_name": {
                "type": "string",
                "enum": [
                  "db1",
                  "db2",
                  "db3",
                  "db4",
                  "db5",
                  "db6",
                  "db7",
                  "db8",
                  "db9"
                ],
                "example": "db1"
              },
              "internal_hostname": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "some-name.dns.svc.cluster.local"
              },
              "internal_port": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "5432"
              },
              "internal_connections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                    },
                    "type": {
                      "type": "string",
                      "example": "appResource"
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ]
                }
              },
              "data": {
                "type": "object",
                "properties": {
                  "db_name": {
                    "type": "string",
                    "example": "firstsite-db"
                  },
                  "db_password": {
                    "type": "string",
                    "example": "password"
                  },
                  "db_root_password": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "password"
                  },
                  "db_user": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "example": "username"
                  }
                },
                "required": [
                  "db_name",
                  "db_password",
                  "db_root_password",
                  "db_user"
                ]
              },
              "external_connection_string": {
                "type": "string",
                "example": "postgresql://username:password@localhost:31866/firstsite-db"
              },
              "external_hostname": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "firstsite-db-postgresql.external.kinsta.app"
              },
              "external_port": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "31866"
              }
            },
            "required": [
              "id",
              "name",
              "display_name",
              "created_at",
              "memory_limit",
              "cpu_limit",
              "storage_size",
              "type",
              "version",
              "cluster",
              "resource_type_name"
            ]
          }
        },
        "required": [
          "database"
        ]
      },
      "CreateDatabaseRequest": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "location": {
            "type": "string",
            "description": "the location (data center) where the database will be created",
            "example": "us-central1"
          },
          "resource_type": {
            "type": "string",
            "enum": [
              "db1",
              "db2",
              "db3",
              "db4",
              "db5",
              "db6",
              "db7",
              "db8",
              "db9"
            ],
            "description": "the resource type (database size) to be created",
            "example": "db1"
          },
          "display_name": {
            "type": "string",
            "example": "test-db"
          },
          "db_name": {
            "type": "string",
            "example": "test-db"
          },
          "db_password": {
            "type": "string",
            "example": "example-password"
          },
          "db_user": {
            "type": "string",
            "description": "Only optional for Redis. Required for all other types.",
            "example": "example-user"
          },
          "type": {
            "type": "string",
            "enum": [
              "postgresql",
              "redis",
              "mariadb",
              "mysql"
            ],
            "example": "postgresql"
          },
          "version": {
            "type": "string",
            "example": "15"
          }
        },
        "required": [
          "company_id",
          "location",
          "resource_type",
          "display_name",
          "db_name",
          "db_password",
          "type",
          "version"
        ]
      },
      "MKCreateDatabaseResponse": {
        "type": "object",
        "properties": {
          "database": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "database"
        ]
      },
      "UpdateDatabaseRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateDatabaseRequestBody": {
        "type": "object",
        "properties": {
          "resource_type": {
            "type": "string",
            "enum": [
              "db1",
              "db2",
              "db3",
              "db4",
              "db5",
              "db6",
              "db7",
              "db8",
              "db9"
            ],
            "description": "the resource type (database size) to be updated",
            "example": "db1"
          },
          "display_name": {
            "type": "string",
            "example": "test-db"
          }
        }
      },
      "MKUpdateDatabaseResponse": {
        "type": "object",
        "properties": {
          "database": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "display_name": {
                "type": "string",
                "example": "test-db"
              },
              "status": {
                "type": "string",
                "example": "updating"
              }
            },
            "required": [
              "id",
              "display_name",
              "status"
            ]
          }
        },
        "required": [
          "database"
        ]
      },
      "DeleteDatabaseRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeleteDatabaseResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Database \"54fb80af-576c-4fdc-ba4f-b596c83f15a1\" is being deleted"
          }
        },
        "required": [
          "message"
        ]
      },
      "ClearCacheRequestBody": {
        "type": "object",
        "properties": {
          "environment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "environment_id"
        ]
      },
      "MKClearCacheResponse": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "cache:clear-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Clearing site cache in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "operation_id",
          "message",
          "status"
        ]
      },
      "RestartPhpEngineRequestBody": {
        "type": "object",
        "properties": {
          "environment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "environment_id"
        ]
      },
      "RestartPhpEngineResponse": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "php:restart-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Restarting PHP in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "operation_id",
          "message",
          "status"
        ]
      },
      "ModifyPhpVersionRequestBody": {
        "type": "object",
        "properties": {
          "environment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "php_version": {
            "type": "string",
            "example": "8.1"
          }
        },
        "required": [
          "environment_id",
          "php_version"
        ]
      },
      "ModifyPhpVersionResponse": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "php:modify-version-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Modifying PHP version in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "operation_id",
          "message",
          "status"
        ]
      },
      "cloneWPSite-Body": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "display_name": {
            "type": "string",
            "example": "Copy of First WP Site"
          },
          "source_env_id": {
            "type": "string",
            "example": "0010cdaf-0b94-472e-86bd-7edf6fceaa1c"
          }
        },
        "required": [
          "company",
          "display_name",
          "source_env_id"
        ]
      },
      "cloneWPSite-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "site:clone-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Cloning site in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "addPlainWPSite-Body": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "display_name": {
            "type": "string",
            "example": "First plain site"
          },
          "region": {
            "type": "string",
            "example": "us-central1",
            "externalDocs": {
              "url": "https://kinsta.com/docs/data-center-locations/",
              "description": "See the list of available regions"
            }
          }
        },
        "required": [
          "company",
          "display_name",
          "region"
        ]
      },
      "addPlainWPSite-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "sites:add-plain-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Adding plain site in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "addWPSite-Body": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "display_name": {
            "type": "string",
            "example": "First site"
          },
          "region": {
            "type": "string",
            "example": "us-central1",
            "externalDocs": {
              "url": "https://kinsta.com/docs/data-center-locations/",
              "description": "See the list of available regions"
            }
          },
          "install_mode": {
            "type": "string",
            "default": "plain",
            "example": "new",
            "enum": [
              "new",
              "plain",
              "clone"
            ],
            "deprecated": true
          },
          "is_subdomain_multisite": {
            "type": "boolean",
            "example": false
          },
          "admin_email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "admin_password": {
            "type": "string",
            "example": "vJnFnN-~v)PxF[6k"
          },
          "admin_user": {
            "type": "string",
            "example": "admin"
          },
          "is_multisite": {
            "type": "boolean",
            "example": false
          },
          "site_title": {
            "type": "string",
            "example": "My First Site"
          },
          "woocommerce": {
            "type": "boolean",
            "example": false
          },
          "wordpressseo": {
            "type": "boolean",
            "example": false
          },
          "wp_language": {
            "type": "string",
            "example": "en_US",
            "externalDocs": {
              "url": "https://translate.wordpress.org/",
              "description": "Find your WordPress locale"
            }
          }
        },
        "required": [
          "company",
          "display_name",
          "region",
          "install_mode",
          "admin_email",
          "admin_password",
          "admin_user",
          "site_title",
          "wp_language"
        ]
      },
      "addWPSite-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "sites:add-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Adding site in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "getSites-Query": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "company"
        ]
      },
      "getSites-Site": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "firstsite"
          },
          "display_name": {
            "type": "string",
            "example": "First site"
          },
          "status": {
            "type": "string",
            "example": "live"
          },
          "siteLabels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
                },
                "name": {
                  "type": "string",
                  "example": "Do not remove"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "status"
        ]
      },
      "getSites-Response": {
        "type": "object",
        "properties": {
          "company": {
            "type": "object",
            "properties": {
              "sites": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/getSites-Site"
                }
              }
            },
            "required": [
              "sites"
            ]
          }
        },
        "required": [
          "company"
        ]
      },
      "IdEnvBodySchema": {
        "type": "object",
        "properties": {
          "idEnv": {
            "type": "string",
            "example": "id-environment"
          }
        },
        "required": [
          "idEnv"
        ]
      },
      "Domain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "example.com"
          },
          "type": {
            "type": "string",
            "example": "live"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "SiteById-Params": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "site_id"
        ]
      },
      "SiteById-Environment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "first-site"
          },
          "display_name": {
            "type": "string",
            "example": "First site"
          },
          "is_premium": {
            "type": "boolean",
            "example": false
          },
          "is_blocked": {
            "type": "boolean",
            "example": false
          },
          "domains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Domain"
            }
          },
          "primaryDomain": {
            "$ref": "#/components/schemas/Domain"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "is_premium",
          "is_blocked",
          "domains",
          "primaryDomain"
        ]
      },
      "SiteById-Site": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "first-site"
          },
          "display_name": {
            "type": "string",
            "example": "Site Name"
          },
          "company_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "status": {
            "type": "string",
            "example": "live"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteById-Environment"
            }
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "company_id",
          "status",
          "environments"
        ]
      },
      "SiteById-Response": {
        "type": "object",
        "properties": {
          "site": {
            "$ref": "#/components/schemas/SiteById-Site"
          }
        },
        "required": [
          "site"
        ]
      },
      "deleteWpSite-Params": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "site_id"
        ]
      },
      "deleteWpSite-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "sites:delete-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Deleting site in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "WpSiteEnvironmentPluginsParamsSchema": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "UpdateWpEnvironmentRequestBodySchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "akismet"
          },
          "update_version": {
            "type": "string",
            "example": "5.3"
          }
        },
        "required": [
          "name",
          "update_version"
        ]
      },
      "GetWpSiteEnvironmentPluginsResponseSchema": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15b2"
              },
              "container_info": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "54fb80af-576c-4fdc-ba4f-b596c83f15c3"
                  },
                  "wp_plugins": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "akismet"
                            },
                            "title": {
                              "type": "string",
                              "example": "Akismet Anti-Spam: Spam Protection"
                            },
                            "status": {
                              "type": "string",
                              "example": "active"
                            },
                            "version": {
                              "type": "string",
                              "example": "1.0.0"
                            },
                            "update": {
                              "type": "string",
                              "example": "available"
                            },
                            "update_version": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "example": "1.0.1"
                            },
                            "update_status": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "example": "updated"
                            }
                          },
                          "required": [
                            "name",
                            "title",
                            "status",
                            "version",
                            "update",
                            "update_version",
                            "update_status"
                          ]
                        }
                      }
                    },
                    "required": [
                      "data"
                    ]
                  }
                },
                "required": [
                  "id",
                  "wp_plugins"
                ]
              }
            },
            "required": [
              "id",
              "container_info"
            ]
          }
        },
        "required": [
          "environment"
        ]
      },
      "UpdateWpEnvironmentPluginResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "wp-plugin:update-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Updating WordPress plugin in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "BulkUpdateWpEnvironmentPluginsRequestBodySchema": {
        "type": "object",
        "properties": {
          "plugins": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "akismet"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        },
        "required": [
          "plugins"
        ]
      },
      "BulkUpdateWpEnvironmentPluginsResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "wp-plugins:bulk-update-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Bulk-updating WordPress plugins in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "GetWpSiteEnvironmentThemesResponseSchema": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15b2"
              },
              "container_info": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "54fb80af-576c-4fdc-ba4f-b596c83f15c3"
                  },
                  "wp_themes": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "example": "twentytwentythree"
                            },
                            "title": {
                              "type": "string",
                              "example": "Twenty Twenty Three"
                            },
                            "status": {
                              "type": "string",
                              "example": "active"
                            },
                            "version": {
                              "type": "string",
                              "example": "1.0.0"
                            },
                            "update": {
                              "type": "string",
                              "example": "available"
                            },
                            "update_version": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "example": "1.0.1"
                            },
                            "update_status": {
                              "type": [
                                "string",
                                "null"
                              ],
                              "example": "updated"
                            }
                          },
                          "required": [
                            "name",
                            "title",
                            "status",
                            "version",
                            "update",
                            "update_version",
                            "update_status"
                          ]
                        }
                      }
                    },
                    "required": [
                      "data"
                    ]
                  }
                },
                "required": [
                  "id",
                  "wp_themes"
                ]
              }
            },
            "required": [
              "id",
              "container_info"
            ]
          }
        },
        "required": [
          "environment"
        ]
      },
      "UpdateWpEnvironmentThemeResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "wp-theme:update-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Updating WordPress theme in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "BulkUpdateWpEnvironmentThemesRequestBodySchema": {
        "type": "object",
        "properties": {
          "themes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "twenty-twenty-three"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        },
        "required": [
          "themes"
        ]
      },
      "BulkUpdateWpEnvironmentThemesResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "wp-themes:bulk-update-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Bulk-updating WordPress themes in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "SiteDomainRequestParamsSchema": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "AddSiteDomainRequestBodySchema": {
        "type": "object",
        "properties": {
          "domain_name": {
            "type": "string"
          },
          "is_wildcardless": {
            "type": "boolean",
            "default": false
          },
          "custom_ssl_key": {
            "type": "string"
          },
          "custom_ssl_cert": {
            "type": "string"
          }
        },
        "required": [
          "domain_name"
        ]
      },
      "AddSiteDomainResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "sites:add-domain-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Adding site domain in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "DeleteSiteDomainRequestBodySchema": {
        "type": "object",
        "properties": {
          "domain_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "54fb80af-576c-4fdc-ba4f-b596c83f15a1",
              "3b2b80af-576c-4fdc-ba4f-b596c83f15a1"
            ]
          }
        },
        "required": [
          "domain_ids"
        ]
      },
      "DeleteSiteDomainResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "sites:delete-domain-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Deleting site domain in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "GetEnvironments-Params": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "site_id"
        ]
      },
      "GetEnvironments-SshConnection": {
        "type": "object",
        "properties": {
          "ssh_port": {
            "type": "string",
            "example": "808080"
          },
          "ssh_ip": {
            "type": "object",
            "properties": {
              "external_ip": {
                "type": "string",
                "example": "1xx.1xx.1xx.1xx"
              }
            },
            "required": [
              "external_ip"
            ]
          }
        },
        "required": [
          "ssh_port",
          "ssh_ip"
        ],
        "description": "How to connect to SSH with SSH keys: [link](https://kinsta.com/docs/connect-to-ssh/#how-to-connect-to-ssh-with-ssh-keys)."
      },
      "GetEnvironments-ContainerInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "php_engine_version": {
            "type": "string",
            "example": "php8.3"
          }
        },
        "required": [
          "id",
          "php_engine_version"
        ]
      },
      "GetEnvironments-Environment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "first-site"
          },
          "display_name": {
            "type": "string",
            "example": "First site"
          },
          "is_blocked": {
            "type": "boolean",
            "example": false
          },
          "id_edge_cache": {
            "type": [
              "string",
              "null"
            ],
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "cdn_cache_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "is_premium": {
            "type": "boolean",
            "example": false
          },
          "domains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Domain"
            }
          },
          "primaryDomain": {
            "$ref": "#/components/schemas/Domain"
          },
          "ssh_connection": {
            "$ref": "#/components/schemas/GetEnvironments-SshConnection"
          },
          "container_info": {
            "$ref": "#/components/schemas/GetEnvironments-ContainerInfo"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "is_blocked",
          "id_edge_cache",
          "cdn_cache_id",
          "is_premium",
          "domains",
          "primaryDomain",
          "ssh_connection",
          "container_info"
        ]
      },
      "GetEnvironments-Response": {
        "type": "object",
        "properties": {
          "site": {
            "type": "object",
            "properties": {
              "environments": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetEnvironments-Environment"
                }
              }
            },
            "required": [
              "environments"
            ]
          }
        },
        "required": [
          "site"
        ]
      },
      "addWPEnvironment-Body": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "example": "development"
          },
          "site_title": {
            "type": "string",
            "example": "My First Site - development"
          },
          "is_premium": {
            "type": "boolean",
            "example": false
          },
          "is_subdomain_multisite": {
            "type": "boolean",
            "example": false
          },
          "admin_email": {
            "type": "string",
            "example": "admin@example.com"
          },
          "admin_password": {
            "type": "string",
            "example": "vJnFnN-~v)PxF[6k"
          },
          "admin_user": {
            "type": "string",
            "example": "admin"
          },
          "is_multisite": {
            "type": "boolean",
            "example": false
          },
          "woocommerce": {
            "type": "boolean",
            "example": false
          },
          "wordpress_plugin_edd": {
            "type": "boolean",
            "example": false
          },
          "wordpressseo": {
            "type": "boolean",
            "example": false
          },
          "wp_language": {
            "type": "string",
            "example": "en_US",
            "externalDocs": {
              "url": "https://translate.wordpress.org/",
              "description": "Find your WordPress locale"
            }
          }
        },
        "required": [
          "display_name",
          "site_title",
          "is_premium",
          "admin_email",
          "admin_password",
          "admin_user",
          "wp_language"
        ]
      },
      "addWPEnvironment-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "environment:add-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Adding environment in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "cloneWpEnvironment-Body": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "example": "development"
          },
          "is_premium": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "display_name",
          "is_premium"
        ]
      },
      "cloneWpEnvironment-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "environment:clone-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Creating plain environment in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "deleteWpEnvironment-Params": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "deleteWpEnvironment-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "environments:delete-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Deleting environment in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "PushEnvironmentRequestBody": {
        "type": "object",
        "properties": {
          "source_env_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "target_env_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "push_db": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "push_files": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "run_search_and_replace": {
            "type": "boolean",
            "default": true,
            "example": true
          }
        },
        "required": [
          "source_env_id",
          "target_env_id"
        ]
      },
      "PushEnvironmentResponse": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "environments:push-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Pushing environment in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "changeEnvironmentPhpAllocation-Params": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "changeEnvironmentPhpAllocation-Body": {
        "type": "object",
        "properties": {
          "worker_number": {
            "type": "number",
            "example": 2
          },
          "worker_memory": {
            "type": "number",
            "example": 256
          }
        },
        "required": [
          "worker_number",
          "worker_memory"
        ]
      },
      "changeEnvironmentPhpAllocation-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "environments:change-environment-php-allocation-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Environment PHP allocation change in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "operation_id",
          "message",
          "status"
        ]
      },
      "changeSitePhpAllocation-Params": {
        "type": "object",
        "properties": {
          "site_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "site_id"
        ]
      },
      "changeSitePhpAllocation-Body": {
        "type": "object",
        "properties": {
          "worker_number": {
            "type": "number",
            "example": 2
          },
          "worker_memory": {
            "type": "number",
            "example": 256
          }
        },
        "required": [
          "worker_number",
          "worker_memory"
        ]
      },
      "changeSitePhpAllocation-Response": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "sites:change-site-php-allocation-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Site PHP allocation change in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "operation_id",
          "message",
          "status"
        ]
      },
      "OperationStatusParams": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "sites:add-8dc99dce-c5c7-4d8e-b589-6641696fc830"
          }
        },
        "required": [
          "operation_id"
        ]
      },
      "OperationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "example": 202
          },
          "message": {
            "type": "string",
            "example": "Operation in progress"
          },
          "data": {}
        },
        "required": [
          "status",
          "message"
        ]
      },
      "ClearEdgeCacheRequestBody": {
        "type": "object",
        "properties": {
          "environment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "clear_subdirectories": {
            "type": "boolean",
            "default": false,
            "example": true
          },
          "url": {
            "type": "string",
            "example": "http://example.com"
          }
        },
        "required": [
          "environment_id"
        ]
      },
      "MKClearEdgeCacheResponse": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "edgeCache:clear-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Clearing site edge cache in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "operation_id",
          "message",
          "status"
        ]
      },
      "ClearCDNCacheRequestBody": {
        "type": "object",
        "properties": {
          "environment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "cdn_cache_id": {
            "type": "string",
            "example": "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
          }
        },
        "required": [
          "environment_id",
          "cdn_cache_id"
        ]
      },
      "ClearCDNCacheResponse": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "cdn-cache:clear-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Clearing site CDN cache in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "operation_id",
          "message",
          "status"
        ]
      },
      "GetDeniedIPsQuery": {
        "type": "object",
        "properties": {
          "environment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "environment_id"
        ]
      },
      "GetDeniedIPsResponse": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "ip_list": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "127.0.0.1"
                ]
              }
            },
            "required": [
              "id",
              "ip_list"
            ]
          }
        },
        "required": [
          "environment"
        ]
      },
      "UpdateDeniedIPsRequestBody": {
        "type": "object",
        "properties": {
          "environment_id": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "ip_list": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "127.0.0.1"
            ]
          }
        },
        "required": [
          "environment_id",
          "ip_list"
        ]
      },
      "UpdateDeniedIPsResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "null"
          }
        },
        "required": [
          "result"
        ]
      },
      "GetBackupsRequestParamsSchema": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "Backup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 123456789
          },
          "name": {
            "type": "string",
            "example": "mySiteName-1234567890-backupType"
          },
          "note": {
            "type": [
              "string",
              "null"
            ],
            "example": "Daily Auto Backup"
          },
          "type": {
            "type": "string",
            "example": "manual"
          },
          "created_at": {
            "type": "number",
            "example": 1665382600770
          }
        },
        "required": [
          "id",
          "name",
          "note",
          "type",
          "created_at"
        ]
      },
      "BackupEnvironment": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "example": "MyEnvironment"
          },
          "backups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Backup"
            }
          }
        },
        "required": [
          "display_name",
          "backups"
        ]
      },
      "GetBackupsResponseSchema": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/BackupEnvironment"
          }
        },
        "required": [
          "environment"
        ]
      },
      "GetDownloadableBackupsRequestParamsSchema": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "DownloadableBackup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "1915fa3a-7ef4-4766-806d-71104be7deb0"
          },
          "created_at": {
            "type": "number",
            "example": 1665382600770
          },
          "download_link": {
            "type": [
              "string",
              "null"
            ],
            "example": "https://example.com"
          },
          "expires_at": {
            "type": "number",
            "example": 1665382600770
          },
          "is_generation_in_progress": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "id",
          "created_at",
          "download_link",
          "expires_at",
          "is_generation_in_progress"
        ]
      },
      "DownloadableBackupEnvironment": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "example": "MyEnvironment"
          },
          "downloadable_backups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DownloadableBackup"
            }
          }
        },
        "required": [
          "display_name",
          "downloadable_backups"
        ]
      },
      "GetDownloadableBackupsResponseSchema": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/DownloadableBackupEnvironment"
          }
        },
        "required": [
          "environment"
        ]
      },
      "RestoreSnapshotToEnvRequestParamsSchema": {
        "type": "object",
        "properties": {
          "target_env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "target_env_id"
        ]
      },
      "RestoreSnapshotToEnvRequestBodySchema": {
        "type": "object",
        "properties": {
          "backup_id": {
            "type": "number",
            "example": 123456789
          },
          "notified_user_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "backup_id",
          "notified_user_id"
        ]
      },
      "RestoreSnapshotToEnvResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "backups:restore-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Restoring a backup to environment in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "AddManualBackupRequestParamsSchema": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "AddManualBackupRequestBodySchema": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "default": "",
            "example": "my-awesome-backup"
          }
        }
      },
      "AddManualBackupResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "backups:add-manual-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Adding a manual backup to environment in progress"
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "BackupByIdRequestParamsSchema": {
        "type": "object",
        "properties": {
          "backup_id": {
            "type": "number",
            "example": 165424355
          }
        },
        "required": [
          "backup_id"
        ]
      },
      "RemoveBackupResponseSchema": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string",
            "example": "backups:remove-54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "message": {
            "type": "string",
            "example": "Removing a backup in progress. Use the operation_id to check the status."
          },
          "status": {
            "type": "number",
            "example": 202
          }
        },
        "required": [
          "message",
          "status"
        ]
      },
      "GetLogsRequestParamsSchema": {
        "type": "object",
        "properties": {
          "env_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "env_id"
        ]
      },
      "GetLogsRequestQuerySchema": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "enum": [
              "error",
              "access",
              "kinsta-cache-perf"
            ],
            "default": "error",
            "example": "error"
          },
          "lines": {
            "type": "number",
            "maximum": 20000,
            "default": 1000,
            "example": 1000
          }
        },
        "required": [
          "file_name",
          "lines"
        ]
      },
      "Logs": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "string"
          }
        },
        "required": [
          "logs"
        ]
      },
      "ActiveContinerEnvironment": {
        "type": "object",
        "properties": {
          "container_info": {
            "$ref": "#/components/schemas/Logs"
          }
        },
        "required": [
          "container_info"
        ]
      },
      "GetLogsResponseSchema": {
        "type": "object",
        "properties": {
          "environment": {
            "$ref": "#/components/schemas/ActiveContinerEnvironment"
          }
        },
        "required": [
          "environment"
        ]
      },
      "getStaticSites-Query": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "example": 10
          },
          "offset": {
            "type": "number",
            "default": 0,
            "example": 3
          }
        },
        "required": [
          "company"
        ]
      },
      "getStaticSites-StaticSite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "first-static-site"
          },
          "display_name": {
            "type": "string",
            "example": "First static site"
          },
          "status": {
            "type": "string",
            "enum": [
              "deploymentInProgress",
              "deploymentSuccess",
              "deploymentFailed",
              "deploymentCancelled",
              "deleting",
              "deletionFailed"
            ],
            "example": "deploymentSuccess"
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "status"
        ]
      },
      "getStaticSites-Response": {
        "type": "object",
        "properties": {
          "company": {
            "type": "object",
            "properties": {
              "static_sites": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/getStaticSites-StaticSite"
                    }
                  }
                },
                "required": [
                  "items"
                ]
              }
            },
            "required": [
              "static_sites"
            ]
          }
        },
        "required": [
          "company"
        ]
      },
      "StaticSiteById-Params": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "StaticSiteById-Deployment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "status": {
            "type": "string",
            "example": "success"
          },
          "repo_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/user/project"
          },
          "branch": {
            "type": "string",
            "example": "main"
          },
          "commit_message": {
            "type": [
              "string",
              "null"
            ],
            "example": "Merge pull request #123"
          },
          "created_at": {
            "type": "number",
            "example": 1665382600770
          }
        },
        "required": [
          "id",
          "status",
          "repo_url",
          "branch",
          "commit_message",
          "created_at"
        ]
      },
      "StaticSiteById-StaticSite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "name": {
            "type": "string",
            "example": "first-static-site"
          },
          "display_name": {
            "type": "string",
            "example": "First static site"
          },
          "status": {
            "type": "string",
            "enum": [
              "deploymentInProgress",
              "deploymentSuccess",
              "deploymentFailed",
              "deploymentCancelled",
              "deleting",
              "deletionFailed"
            ],
            "example": "deploymentSuccess"
          },
          "repo_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/user/project"
          },
          "default_branch": {
            "type": "string",
            "example": "main"
          },
          "auto_deploy": {
            "type": "boolean",
            "example": false
          },
          "remote_repository_id": {
            "type": "string",
            "example": "012345678"
          },
          "git_repository_id": {
            "type": "string",
            "example": "4978765082"
          },
          "git_type": {
            "type": "string",
            "example": "github"
          },
          "hostname": {
            "type": "string",
            "example": "http://example.com"
          },
          "build_command": {
            "type": [
              "string",
              "null"
            ],
            "example": "make build"
          },
          "created_at": {
            "type": "number",
            "example": 1667489138845
          },
          "updated_at": {
            "type": "number",
            "example": 1667489138845
          },
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticSiteById-Deployment"
            }
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "status",
          "repo_url",
          "default_branch",
          "auto_deploy",
          "remote_repository_id",
          "git_repository_id",
          "git_type",
          "hostname",
          "build_command",
          "created_at",
          "updated_at",
          "deployments"
        ]
      },
      "StaticSiteById-Response": {
        "type": "object",
        "properties": {
          "static_site": {
            "$ref": "#/components/schemas/StaticSiteById-StaticSite"
          }
        },
        "required": [
          "static_site"
        ]
      },
      "UpdateStaticSiteRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateStaticSiteRequestBody": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "example": "My static site"
          },
          "auto_deploy": {
            "type": "boolean",
            "example": true
          },
          "default_branch": {
            "type": "string",
            "example": "main"
          },
          "build_command": {
            "type": [
              "string",
              "null"
            ],
            "example": "npm run build"
          },
          "node_version": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "16.20.0",
              "18.16.0",
              "20.2.0"
            ],
            "example": "18.16.0"
          },
          "published_directory": {
            "type": [
              "string",
              "null"
            ],
            "example": "dist"
          }
        }
      },
      "UpdateStaticSiteResponse": {
        "type": "object",
        "properties": {
          "static_site": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "display_name": {
                "type": "string",
                "example": "My static site"
              },
              "auto_deploy": {
                "type": "boolean",
                "example": true
              },
              "default_branch": {
                "type": "string",
                "example": "main"
              },
              "build_command": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "npm run build"
              },
              "node_version": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "20.2.0"
              },
              "published_directory": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "dist"
              },
              "updated_at": {
                "type": "number",
                "example": 1695300630620
              },
              "status": {
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "deploymentInProgress",
                  "deploymentFailed",
                  "deploymentSuccess",
                  "deploymentCancelled",
                  "deleting",
                  "deletionFailed"
                ],
                "example": "deploymentInProgress"
              }
            },
            "required": [
              "id",
              "display_name",
              "auto_deploy",
              "default_branch",
              "build_command",
              "node_version",
              "published_directory",
              "updated_at",
              "status"
            ]
          }
        },
        "required": [
          "static_site"
        ]
      },
      "StaticSiteDeploymentById-Request": {
        "type": "object",
        "properties": {
          "deployment_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "deployment_id"
        ]
      },
      "StaticSiteDeploymentById-Deployment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "static_site_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "status": {
            "type": "string",
            "enum": [
              "waiting",
              "inProgress",
              "success",
              "failed",
              "cancelled"
            ],
            "example": "inProgress"
          },
          "repo_url": {
            "type": "string",
            "format": "uri",
            "example": "https://github.com/user/project"
          },
          "branch": {
            "type": "string",
            "example": "main"
          },
          "author_login": {
            "type": [
              "string",
              "null"
            ],
            "example": "jane-doe"
          },
          "author_img": {
            "type": [
              "string",
              "null"
            ],
            "example": "https://avatars.githubusercontent.com/u/123456"
          },
          "commit_sha": {
            "type": [
              "string",
              "null"
            ],
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "commit_message": {
            "type": [
              "string",
              "null"
            ],
            "example": "Merge pull request #123"
          },
          "cloud_build_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "created_at": {
            "type": "number",
            "example": 1665382600770
          },
          "updated_at": {
            "type": "number",
            "example": 1665394600620
          },
          "finished_at": {
            "type": [
              "number",
              "null"
            ],
            "example": 1665406600330
          },
          "started_at": {
            "type": [
              "number",
              "null"
            ],
            "example": 1665418600450
          }
        },
        "required": [
          "id",
          "static_site_id",
          "status",
          "repo_url",
          "branch",
          "author_login",
          "author_img",
          "commit_sha",
          "commit_message",
          "cloud_build_id",
          "created_at",
          "updated_at",
          "finished_at",
          "started_at"
        ]
      },
      "StaticSiteDeploymentById-Response": {
        "type": "object",
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/StaticSiteDeploymentById-Deployment"
          }
        },
        "required": [
          "deployment"
        ]
      },
      "ManualStaticSiteDeploymentBody": {
        "type": "object",
        "properties": {
          "static_site_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "branch": {
            "type": "string",
            "example": "main"
          }
        },
        "required": [
          "static_site_id"
        ]
      },
      "ManualStaticSiteDeploymentResponse": {
        "type": "object",
        "properties": {
          "deployment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "status": {
                "type": "string",
                "enum": [
                  "waiting",
                  "inProgress",
                  "success",
                  "failed",
                  "cancelled"
                ],
                "example": "waiting"
              }
            },
            "required": [
              "id",
              "status"
            ]
          }
        },
        "required": [
          "deployment"
        ]
      },
      "StaticSiteRedeploymentBody": {
        "type": "object",
        "properties": {
          "static_site_id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "deployment_id": {
            "type": "string",
            "format": "uuid",
            "example": "12fb80af-576d-4fdc-ra4f-b596c83f86yv"
          }
        },
        "required": [
          "static_site_id"
        ]
      },
      "StaticSiteRedeploymentResponse": {
        "type": "object",
        "properties": {
          "deployment": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
              },
              "status": {
                "type": "string",
                "enum": [
                  "waiting",
                  "inProgress",
                  "success",
                  "failed",
                  "cancelled"
                ],
                "example": "waiting"
              }
            },
            "required": [
              "id",
              "status"
            ]
          }
        },
        "required": [
          "deployment"
        ]
      },
      "DeleteStaticSiteRequestParams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeleteStaticSiteResponse": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "example": "8097788359944597"
          }
        },
        "required": [
          "transaction_id"
        ]
      },
      "ValidateAPIKeyResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "my-api-key"
          },
          "expires_at": {
            "type": [
              "string",
              "null"
            ],
            "example": "1704081600000"
          },
          "company": {
            "type": "string",
            "example": "54fb80af-576c-4fdc-ba4f-b596c83f15a1"
          },
          "status": {
            "type": "string",
            "example": "active"
          }
        },
        "required": [
          "name",
          "expires_at",
          "company",
          "status"
        ]
      }
    },
    "parameters": {}
  },
  "x-tagGroups": [
    {
      "name": "Company",
      "tags": [
        "Company Users"
      ]
    },
    {
      "name": "Static Site Hosting",
      "tags": [
        "Static Sites",
        "Static Site Deployments"
      ]
    },
    {
      "name": "Application Hosting",
      "tags": [
        "Applications",
        "Pipelines",
        "Application Deployments",
        "Application Metrics",
        "Application Processes",
        "Internal Connections",
        "Application CDN",
        "Application Edge Caching",
        "Application Clear Cache"
      ]
    },
    {
      "name": "Database Hosting",
      "tags": [
        "Databases"
      ]
    },
    {
      "name": "Utilities",
      "tags": [
        "Operations",
        "Authentication"
      ]
    }
  ]
}
